"""
Phonopy calculation
"""
import numpy as np
import sys
import os
import shutil
import seekpath


from pymatflow.remote.server import server_handle
from pymatflow.abinit.abinit import Abinit

"""
Usage:
Note:
    参考: https://atztogo.github.io/phonopy/abinit.html
"""


class PhonopyRun(Abinit):
    """
    """
    def __init__(self):
        super().__init__()

        #self.dataset[0].guard.set_queen(queen="static", electrons=self.dataset[0].electrons, system=self.dataset[0].system)

        self.dataset[0].electrons.basic_setting()

        self.supercell_n = [1, 1, 1]

    def phonopy(self, directory="tmp-abinit-phonopy", head_inpname="head-phonon.in", pos_inpname="pos.in", runopt="gen", auto=0):
        """
        """
        if runopt == "gen" or runopt == "genrun":
            if os.path.exists(directory):
                shutil.rmtree(directory)
            os.mkdir(directory)
            os.system("cp *.psp8 %s/" % directory)
            os.system("cp *.GGA_PBE-JTH.xml %s/" % directory)
            os.system("cp %s %s/" % (self.dataset[0].system.xyz.file, directory))


            self.dataset[0].electrons.set_scf_nscf("scf")
            #
            with open(os.path.join(directory, head_inpname), 'w') as fout:
                #self.dataset[0].electrons.to_dataset[0](fout)
                fout.write(self.dataset[0].electrons.to_string())
            with open(os.path.join(directory, pos_inpname), 'w') as fout:
                #self.dataset[0].system.to_dataset[0](fout)
                fout.write(self.dataset[0].system.to_string())

            os.chdir(directory)
            os.system("phonopy --abinit -d --dim='%d %d %d' -c %s" % (self.supercell_n[0], self.supercell_n[1], self.supercell_n[2], pos_inpname))

            disps = self.get_disps("./")

            for disp in disps:
                os.mkdir("disp-%s" % disp)
                os.system("cp ./*.psp8 ./disp-%s/" % (disp))
                # why the following operations:
                # in pymatflow, we set element type in order of atomic number, but phonopy generate the supercell
                # with modification of the znucl. the defined structure is actually the same, but there is probel
                # with the specification of pseudo in the xxx.files then.
                # so I only use the coordinate section of the structure file generated by phonopy and the setting
                # of znucl and typat is kept as the original dataset[0] by pymatflow.
                os.system("cat %s > ./disp-%s/supercell-%s.in" % (head_inpname, disp, disp))
                os.system("head %s -n -%d >> ./disp-%s/supercell-%s.in" % (pos_inpname, (self.dataset[0].system.xyz.natom + 2), disp, disp))
                os.system("tail supercell-%s.in -n %d >> ./disp-%s/supercell-%s.in" % (disp, (self.dataset[0].system.xyz.natom + 1), disp, disp))
                with open("./disp-%s/supercell-%s.files" % (disp, disp), 'w') as fout:
                    fout.write("supercell-%s.in\n" % disp)
                    fout.write("supercell-%s.out\n" % disp)
                    fout.write("supercell-%si\n" % disp)
                    fout.write("supercell-%so\n" % disp)
                    fout.write("temp\n")
                    for element in self.dataset[0].system.xyz.specie_labels:
                        fout.write("%s\n" % (element + ".psp8"))
            os.chdir("../")

            # generate yhbatch scripts
            with open(os.path.join(directory, "phonopy-job.slurm"), 'w') as fout:
                fout.write("#!/bin/bash\n")
                fout.write("#SBATCH -p %s\n" % self.run_params["partition"])
                fout.write("#SBATCH -N %d\n" % self.run_params["nodes"])
                fout.write("#SBATCH -n %d\n" % self.run_params["ntask"])
                fout.write("#SBATCH -J %s\n" % self.run_params["jobname"])
                fout.write("#SBATCH -o %s\n" % self.run_params["stdout"])
                fout.write("#SBATCH -e %s\n" % self.run_params["stderr"])
                for disp in disps:
                    fout.write("cd disp-%s\n" % disp)
                    fout.write("yhrun $PMF_ABINIT < supercell-%s.files\n" % disp)
                    fout.write("cd ../\n")

            # generate pbs scripts
            with open(os.path.join(directory, "phonopy-job.pbs"), 'w') as fout:
                fout.write("#!/bin/bash\n")
                fout.write("#PBS -N %s\n" % self.run_params["jobname"])
                fout.write("#PBS -l nodes=%d:ppn=%d\n" % (self.run_params["nodes"], self.run_params["ppn"]))
                fout.write("\n")
                fout.write("cd $PBS_O_WORKDIR\n")
                fout.write("NP=`cat $PBS_NODEFILE | wc -l`\n")
                for disp in disps:
                    fout.write("cd disp-%s\n" % disp)
                    fout.write("mpirun -np $NP -machinefile $PBS_NODEFILE $PMF_ABINIT < supercell-%s.files\n" % disp)
                    fout.write("cd ../\n")

            # generate cdcloud scripts
            with open(os.path.join(directory, "phonopy-job.slurm_cd"), 'w') as fout:
                fout.write("#!/bin/bash\n")
                fout.write("#SBATCH -p %s\n" % self.run_params["partition"])
                fout.write("#SBATCH -N %d\n" % self.run_params["nodes"])
                fout.write("#SBATCH -n %d\n" % self.run_params["ntask"])
                fout.write("#SBATCH -J %s\n" % self.run_params["jobname"])
                fout.write("#SBATCH -o %s\n" % self.run_params["stdout"])
                fout.write("#SBATCH -e %s\n" % self.run_params["stderr"])
                fout.write("#\n")
                fout.write("export I_MPI_PMI_LIBRARY=/opt/gridview/slurm/lib/libpmi.so\n")
                fout.write("export FORT_BUFFERED=1\n")                
                for disp in disps:
                    fout.write("cd disp-%s\n" % disp)
                    fout.write("srun --mpi=pmix_v3 $PMF_ABINIT < supercell-%s.files\n" % disp)
                    fout.write("cd ../\n")

        if runopt == "run" or runopt == "genrun":
            # run the simulation
            os.chdir(directory)
            disps = self.get_disps("./")
            for disp in disps:
                os.chdir("disp-%s" % disp)
                os.system("$PMF_ABINIT < supercell-%s.files" % disp)
                os.chdir("../")
            os.chdir("../")

        server_handle(auto=auto, directory=directory, jobfilebase="phonopy-job", server=self.run_params["server"])


    def get_disps(self, directory="./"):
        os.chdir(directory)
        os.system("ls | grep 'supercell-' > geo.data")
        disps = []
        with open("geo.data", 'r') as fin:
            for line in fin:
                disps.append(line.split(".")[0].split("-")[1])
        return disps
